[project]
name = "mcp-server-for-splunk"
version = "0.3.0"
description = "MCP server for Splunk"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    {name = "MCP for Splunk", email = "developer@example.com"}
]
keywords = ["mcp", "splunk", "model-context-protocol"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "mcp[cli]>=1.8.1",
    "fastmcp>=2.11.3",
    "splunk-sdk>=2.1.0",
    "python-dotenv>=1.0.0",
    "httpx>=0.27.0",
    "uvicorn>=0.32.0",
    "wsproto>=1.2.0",
    "openai>=1.0.0",
    "openai-agents>=0.1.0",
]
license = { file = "LICENSE" }
urls = { Homepage = "https://github.com/deslicer/mcp-server-for-splunk" }

[project.scripts]
generate-tool = "contrib.scripts.generate_tool:main"
validate-tools = "contrib.scripts.validate_tools:main"
mcp-server = "src.cli.build_and_run:main"



[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.7.0"
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0"
]
docs = [
    "httpx>=0.24.0",
    "beautifulsoup4>=4.12.0"
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/pyproject.toml",
    "/README.md"
]

[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.7.0",
    "watchdog>=6.0.0",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--asyncio-mode=auto"
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]
required_plugins = [
    "pytest-asyncio"
]

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = ["E", "W", "F", "I", "N", "B", "UP"]
ignore = ["E501"]  # Line too long (handled by black)

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
exclude = "(^src/tools/|^src/resources/|^src/routes/|^src/prompts/|^src/core/(discovery|loader|enhanced_config_extractor|__init__|base|client_identity)\\.py|^src/server\\.py)"
